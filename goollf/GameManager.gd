## David Lanza 2-19-25
## This code was generated by chatgpt 4o.
##
## This is a first stab at a state stack for this game.
##
## When loading a new state/level, we change its process_mode (so it can process input),
## and pass it an instance of GameManager so it can call state stack functions. 
##
## Then every frame/cycle, we pass user input into its handle_input function.

extends Node

class_name GameManager

var state_stack: Array[Node] = []
var current_state: Node = null

func _ready():
	push_state("res://TitleScreen.tscn")

func push_state(scene_path: String):
	var scene = load(scene_path).instantiate()
	if scene:
		add_child(scene)
		state_stack.append(scene)
		_set_active_state(scene)

func pop_state():
	if state_stack.size() > 0:
		var state = state_stack.pop_back()
		remove_child(state)
		state.queue_free()
		
		if state_stack.size() > 0:
			_set_active_state(state_stack[-1])
		else:
			current_state = null

func _set_active_state(new_state: Node):
	if current_state:
		current_state.process_mode = Node.PROCESS_MODE_DISABLED
	
	current_state = new_state
	if current_state:
		current_state.process_mode = Node.PROCESS_MODE_INHERIT
		if current_state.has_method("set_game_manager"):
			current_state.set_game_manager(self)

func _input(event):
	if current_state and current_state.has_method("handle_input"):
		current_state.handle_input(event)
